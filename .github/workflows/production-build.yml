name: Build to Production

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
#       - uses: actions/checkout@v3

#       # - name: Configure AWS Credentials
#       #   uses: aws-actions/configure-aws-credentials@v2
#       #   with:
#       #     role-to-assume: arn:aws:iam::762417892045:role/github-actions
#       #     aws-region: us-east-1

#       # - name: Login to Amazon ECR Private
#       #   id: login-ecr
#       #   uses: aws-actions/amazon-ecr-login@v1

#       - name: Build
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           ECR_REPOSITORY: 5ob-api
#         run: |
#           echo $IMAGE_TAG
#           docker build .

#       - name: Bump version and push tag
#         id: tagging
#         uses: K-Phoen/semver-release-action@master
#         with:
#           release_branch: main
#           release_strategy: tag
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#       - name: Push container to ECR
#         run: |
#           echo ${{ steps.tagging.outputs.tag }}
#           # docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG


      - uses: paulhatch/semantic-version@v5.0.2
        id: tagging
        with:
          tag_prefix: "v"
          # A string which, if present in a git commit, indicates that a change represents a
          # major (breaking) change, supports regular expressions wrapped with '/'
          major_pattern: "(MAJOR)"
          # A string which indicates the flags used by the `major_pattern` regular expression. Supported flags: idgs
          major_regexp_flags: ""
          # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
          minor_pattern: "(MINOR)"
          # A string which indicates the flags used by the `minor_pattern` regular expression. Supported flags: idgs
          minor_regexp_flags: ""
          # A string to determine the format of the version output
          version_format: "${major}.${minor}.${patch}-prerelease${increment}"
          # Optional path to check for changes. If any changes are detected in the path the
          # 'changed' output will true. Enter multiple paths separated by spaces.
          change_path: "src/my-service"
          # Named version, will be used as suffix for name version tag
          namespace: my-service
          # If this is set to true, *every* commit will be treated as a new version.
          bump_each_commit: false
          # If true, the body of commits will also be searched for major/minor patterns to determine the version type.
          search_commit_body: false
          # The output method used to generate list of users, 'csv' or 'json'.
          user_format_type: "csv"
          # Prevents pre-v1.0.0 version from automatically incrementing the major version.
          # If enabled, when the major version is 0, major releases will be treated as minor and minor as patch. Note that the version_type output is unchanged.
          enable_prerelease_mode: true
      
      - name: Push container to ECR
        run: |
          echo ${{ steps.tagging.outputs.version }}
          
        
